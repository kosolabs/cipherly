name: CI
on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main
concurrency:
  group: ci-workflow-${{ github.workflow }}-ref-${{ github.ref }}
  # Cancel in-progress workflows for PRs (but not main).
  cancel-in-progress: ${{ github.ref != 'refs/heads/main'}}
permissions:
  contents: read
jobs:
  docker:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - run: docker build -t gcr.io/cipherly/cipherly .
  cargo:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Configure rust version
        id: rust-version
        run: |
          VERSION=$(cat rust-toolchain.toml| sed -rn 's/^channel = "([0-9]+\.[0-9]+\.[0-9]+)"/\1/p')
          if [ -z "${VERSION}" ]; then
            echo "Version not found in rust-toolchain.toml"
            exit 1
          fi
          echo VERSION=$VERSION >> "$GITHUB_OUTPUT"
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # master
        with:
          toolchain: ${{ steps.rust-version.outputs.VERSION }}
          components: rustfmt,clippy
      - name: Rust build cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          workspaces: "./backend/ -> target"
          shared-key: "backend-build"
      - name: Make static dir
        run: rm -f static && mkdir static
      - name: Run cargo test
        run: cargo test
      - name: Run cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Run cargo fmt check
        run: cargo fmt --all -- --check
  npm:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          package_json_file: frontend/package.json
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: frontend/.nvmrc
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml
      - run: pnpm install
      - run: pnpm build
      - run: pnpm lint
      - run: pnpm check
      - run: pnpm test:unit
      - id: playwright-cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/frontend/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-playwright-
      - run: pnpm exec playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - run: pnpm test:e2e
